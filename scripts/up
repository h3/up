#!/usr/bin/env python
# -*- coding: utf-8 -*-


import sys, os #, shutil, subprocess
import logging
import argparse
import coloredlogs
import up

from up.events import EventMixin
from up.conf import Settings

from yapsy.PluginManager import PluginManager

__author__ = 'Maxime Haineault'

logger = logging.getLogger('yapsy')
logger.disabled = True

#logging.getLogger('yapsy').setLevel(logging.DEBUG)

parser = argparse.ArgumentParser(prog='up', description='Deploy like a boss')
parser.add_argument('-l', '--log-level', default=0, help='Log level', required=False)

settings = Settings()

LOADED_PLUGINS = {}
CORE_PLUGINS = ['deploy']

def pluginIterator(pm):
    for plugin in pm.getAllPlugins():
        if settings.plugins == [] \
            or plugin.name in settings.plugins \
            or plugin.name in CORE_PLUGINS:
            yield plugin

def run():
    # Initialize plugins
    pm = PluginManager()
    pm.setPluginPlaces([
        # Collect core plugins
        os.path.join(os.path.dirname(up.__file__), 'plugins/'),
        # Collect project relative plugins
        os.path.join(os.getcwd(), 'up/plugins/')])
    pm.collectPlugins()

    # Activate all loaded plugins and build argument parser 
    # dynamically from installed plugins
    subparsers = parser.add_subparsers(dest='command', help="test subparser")
    for plugin in pluginIterator(pm):
        pm.activatePluginByName(plugin.name)
        obj = plugin.plugin_object
        # Load default plugin configs
        if hasattr(obj, 'default_conf'):
            settings.set_plugin_defaults(plugin.name, obj.default_conf)
        # Load sub commands if needed
        if hasattr(obj, 'argparse'):
            obj.argparse(subparsers)
        LOADED_PLUGINS[plugin.name] = {'plugin': plugin, 'object': obj}

    plugins = CORE_PLUGINS + settings.plugins
    for plugin in plugins:
        if plugin in LOADED_PLUGINS:
            obj = LOADED_PLUGINS[plugin].get('object')
            if hasattr(obj, 'init'):
                obj.init()

    args = parser.parse_args()

    log_level = getattr(logging, str(args.log_level).upper(), logging.INFO)
    if not isinstance(log_level, int):
        raise ValueError('Invalid log level: %s' % log_level)
    else:
       #logging.basicConfig(level=log_level)
       #coloredlogs.install(level=log_level)
        coloredlogs.install(level=0)
        coloredlogs.install(level=1)
        coloredlogs.install(level=2)
        coloredlogs.install(level=3)
        coloredlogs.install(level=4)
        coloredlogs.install(level=5)

    # Init plugins and run command for all stages
    kwargs = dict(args._get_kwargs())
    stages = kwargs.get('stages').split(',')
    for stage in settings.stages:
        stage = stage.strip()
        if stage != 'default' and stage in stages:
            settings.set_stage(stage.strip())
            EventMixin().trigger(args.command, context=kwargs)
    return 0


def main():
    sys.exit(run())

if __name__=='__main__':
    main()
